(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";const type=require("type-of"),request=require("superagent"),h=require("hyperscript-string"),$=require("domtastic"),rivets=require("rivets");$.fn.innerText=function(e){return void 0===e?this[0].innerText:this.forEach(function(t){return t.innerText=""+e})},$.fn.clear=function(){return this.forEach(e=>{e.innerHTML=""}),this},$.fn.outerHTML=function(){return this.prop("outerHTML")};const state={message:"",knowledge:[],conversation:[],error:!1};function _error(e,t,{response:n}){n=n?[n.status,n.text]:[],console.warn(`[${e} ${t}]`,...n)}function get_knowledge(){request.get("/knowledge").then(({body:e})=>{state.knowledge=e},e=>_error("GET","/knowledge",e))}function send_message(e="",t){request.post("/respond").send(e).then(({body:e})=>{state.conversation.push({text:e[0]})},e=>{_error("POST","/respond",e),t&&t()})}function _const(e,t,n){return Object.defineProperty(e,t,{value:n,writable:!1,enumerable:!0,configurable:!0}),e}send_message(),get_knowledge(),$(".Conversation-input").on("keydown",e=>{let t=state.message;if("Enter"==e.code&&!e.shiftKey&&!e.altKey&&!e.ctrlKey){if(""==t)return;return state.message="",state.conversation.push({text:t,is_user:!0}),send_message(t,()=>{state.error=!0}),get_knowledge(),!1}}).on("paste",e=>{e.preventDefault();let t=e.clipboardData.getData("text/plain");return document.execCommand("insertHTML",!1,t),!1});const{Binding:Binding}=rivets._;rivets._.Binding=class extends Binding{parseTarget(){return this.binder.parseTarget&&Object.assign(this,this.binder.parseTarget(this.keypath)),super.parseTarget()}publish(){_const(this,"state","publish");super.publish();_const(this,"state")}},rivets.binders.input={parseTarget(e){let t;return[e,t]=e.trim().split(/\s*\?\s*/),{keypath:e,empty_class:t}},bind:function(e){$(e).on("input.rivets",this.publish)},unbind:function(e){$(e).off("input.rivets")},routine:function(e,t){"publish"!=this.state&&(e.innerText=t),state.error=!1,this.empty_class&&$(e).toggleClass(this.empty_class,""==t)},getValue:function(e){return e.innerText.trim()}},global.$state=state,rivets.bind(document.body,state);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"domtastic":5,"hyperscript-string":6,"rivets":11,"superagent":14,"type-of":19}],2:[function(require,module,exports){
"use strict";module.exports=function(r){return null==r?[]:Array.isArray(r)?r:[r]};

},{}],3:[function(require,module,exports){
!function(){"use strict";var e={}.hasOwnProperty;function n(){for(var r=[],t=0;t<arguments.length;t++){var f=arguments[t];if(f){var o=typeof f;if("string"===o||"number"===o)r.push(f);else if(Array.isArray(f)&&f.length){var i=n.apply(null,f);i&&r.push(i)}else if("object"===o)for(var a in f)e.call(f,a)&&f[a]&&r.push(a)}}return r.join(" ")}"undefined"!=typeof module&&module.exports?(n.default=n,module.exports=n):"function"==typeof define&&"object"==typeof define.amd&&define.amd?define("classnames",[],function(){return n}):window.classNames=n}();

},{}],4:[function(require,module,exports){
function Emitter(t){if(t)return mixin(t)}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}"undefined"!=typeof module&&(module.exports=Emitter),Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var s=0;s<r.length;s++)if((i=r[s])===e||i.fn===e){r.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks["$"+t];if(i)for(var r=0,s=(i=i.slice(0)).length;r<s;++r)i[r].apply(this,e);return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};

},{}],5:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).$=t()}(this,function(){"use strict";var e,t,n="undefined"!=typeof window?window:{},i=function(e){for(var t=e.length,n=new Array(t),i=0;i<t;i++)n[i]=e[i];return n},r=function(e,t,n){var i=e.length;if(void 0!==i&&void 0===e.nodeType)for(var r=0;r<i;r++)t.call(n,e[r],r,e);else t.call(n,e,0,e);return e},o=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return n.forEach(function(t){for(var n in t)e[n]=t[n]}),e},u=function(e){return e.filter(function(t,n){return e.indexOf(t)===n})},s=!1,c=/^\s*<(\w+|!)[^>]*>/,f=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,a=/^[.#]?[\w-]*$/,l=function(e,t){var n;if(void 0===t&&(t=document),e){if(e instanceof y)return e;"string"!=typeof e?n=e.nodeType||e===window?[e]:e:c.test(e)?n=v(e):(t="string"==typeof t?document.querySelector(t):t.length?t[0]:t,n=p(e,t))}else n=document.querySelectorAll(null);return m(n)},d=function(e){var t=[];return r(this,function(n){return r(p(e,n),function(e){-1===t.indexOf(e)&&t.push(e)})}),l(t)},h=(e="undefined"!=typeof Element?Element.prototype:n,t=e.matches||e.matchesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector,function(e,n){return t.call(e,n)}),p=function(e,t){if(a.test(e)){if("#"===e[0]){var n=(t.getElementById?t:document).getElementById(e.slice(1));return n?[n]:[]}return"."===e[0]?t.getElementsByClassName(e.slice(1)):t.getElementsByTagName(e)}return t.querySelectorAll(e)},v=function(e){if(f.test(e))return[document.createElement(RegExp.$1)];var t=[],n=document.createElement("div"),i=n.childNodes;n.innerHTML=e;for(var r=0,o=i.length;r<o;r++)t.push(i[r]);return t},m=function(e){return s||(y.prototype=l.fn,y.prototype.constructor=y,s=!0),new y(e)},y=function(e){for(var t=0,n=e.length;t<n;)this[t]=e[t++];this.length=n},b=Object.freeze({$:l,find:d,matches:h,DOMtastic:y}),g=Array.prototype,E=g.every,N=function(e,t){return r(this,e,t)},C=N,O=g.indexOf,w=g.map,T=g.pop,j=g.push,A=g.reduce,L=g.reduceRight,D=g.shift,z=g.some,_=g.unshift,M=Object.freeze({every:E,filter:function(e,t){var n="function"==typeof e?e:function(t){return h(t,e)};return l(g.filter.call(this,n,t))},forEach:N,each:C,indexOf:O,map:w,pop:T,push:j,reduce:A,reduceRight:L,reverse:function(){return l(i(this).reverse())},shift:D,some:z,unshift:_});function x(e){var t=function(){y.call(this,l.apply(void 0,arguments))};return o(t.prototype,e),t}var S=function(e){return e.replace(/-([\da-z])/gi,function(e,t){return t.toUpperCase()})},P=Object.freeze({css:function(e,t){var n,i,o;if("string"==typeof e){if(e=S(e),void 0===t){var u=this.nodeType?this:this[0];return u?function(e){return!isNaN(parseFloat(e))&&isFinite(e)}(o=u.style[e])?parseFloat(o):o:void 0}(n={})[e]=t}else for(i in n=e)o=n[i],delete n[i],n[S(i)]=o;return r(this,function(e){for(i in n)n[i]||0===n[i]?e.style[i]=n[i]:e.style.removeProperty(i.replace(/([a-z\d])([A-Z])/g,"$1-$2").toLowerCase())}),this}}),H=Array.prototype.forEach,$=function e(t){if(this instanceof Node)if("string"==typeof t)this.insertAdjacentHTML("beforeend",t);else if(t instanceof Node)this.appendChild(t);else{var n=t instanceof NodeList?i(t):t;H.call(n,this.appendChild.bind(this))}else k(this,e,t);return this},I=function e(t){if(this instanceof Node)if("string"==typeof t)this.insertAdjacentHTML("beforebegin",t);else if(t instanceof Node)this.parentNode.insertBefore(t,this);else{var n=t instanceof NodeList?i(t):t;H.call(n,e.bind(this))}else k(this,e,t);return this},B=function(e){return"string"==typeof e?e:e instanceof Node?e.cloneNode(!0):"length"in e?[].map.call(e,function(e){return e.cloneNode(!0)}):e},k=function(e,t,n){for(var i=e.length;i--;){var r=0===i?n:B(n);t.call(e[i],r)}},q=Object.freeze({append:$,prepend:function e(t){if(this instanceof Node)if("string"==typeof t)this.insertAdjacentHTML("afterbegin",t);else if(t instanceof Node)this.insertBefore(t,this.firstChild);else{var n=t instanceof NodeList?i(t):t;H.call(n.reverse(),e.bind(this))}else k(this,e,t);return this},before:I,after:function e(t){if(this instanceof Node)if("string"==typeof t)this.insertAdjacentHTML("afterend",t);else if(t instanceof Node)this.parentNode.insertBefore(t,this.nextSibling);else{var n=t instanceof NodeList?i(t):t;H.call(n.reverse(),e.bind(this))}else k(this,e,t);return this},clone:function(){return l(B(this))},_clone:B,_each:k}),F=Object.freeze({attr:function(e,t){if("string"==typeof e&&void 0===t){var n=this.nodeType?this:this[0];return n?n.getAttribute(e):void 0}return r(this,function(n){if("object"==typeof e)for(var i in e)n.setAttribute(i,e[i]);else n.setAttribute(e,t)})},removeAttr:function(e){return r(this,function(t){return t.removeAttribute(e)})}}),R=function(e,t){return r(this,function(n){return n.classList[e](t)})},U=Object.freeze({addClass:function(e){return e&&e.length&&r(e.split(" "),R.bind(this,"add")),this},removeClass:function(e){return e&&e.length&&r(e.split(" "),R.bind(this,"remove")),this},toggleClass:function(e,t){if(e&&e.length){var n="boolean"==typeof t?t?"add":"remove":"toggle";r(e.split(" "),R.bind(this,n))}return this},hasClass:function(e){return(this.nodeType?[this]:this).some(function(t){return t.classList.contains(e)})}}),K=function(e,t){return!(!e||!t||e===t)&&(e.contains?e.contains(t):!!e.compareDocumentPosition&&!(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_DISCONNECTED))},W=Object.freeze({contains:K}),Z="undefined"!=typeof document&&"dataset"in document.documentElement,G=Z?"dataset":"__DOMTASTIC_DATA__",J=function(e){return e.replace(/-+(.)?/g,function(e,t){return t?t.toUpperCase():""})},Q=Object.freeze({data:function(e,t){if("string"==typeof e&&void 0===t){var n=this.nodeType?this:this[0];return n&&G in n?n[G][J(e)]:void 0}return r(this,function(n){Z||(n[G]=n[G]||{}),n[G][J(e)]=t})},prop:function(e,t){if("string"==typeof e&&void 0===t){var n=this.nodeType?this:this[0];return n&&n?n[e]:void 0}return r(this,function(n){return n[e]=t})}}),V=Object.freeze({appendTo:function(e){var t="string"==typeof e?l(e):e;return $.call(t,this),this},empty:function(){return r(this,function(e){return e.innerHTML=""})},remove:function(){return r(this,function(e){e.parentNode&&e.parentNode.removeChild(e)})},replaceWith:function(){return I.apply(this,arguments).remove()},text:function(e){return void 0===e?this[0].textContent:r(this,function(t){return t.textContent=""+e})},val:function(e){return void 0===e?this.length>0?this[0].value:void 0:r(this,function(t){return t.value=e})}}),X=Object.freeze({html:function(e){if(void 0===e){var t=this.nodeType?this:this[0];return t?t.innerHTML:void 0}return r(this,function(t){return t.innerHTML=e})}}),Y=function(){var e=function(e,t){var n=[];return r(this,function(i){for(;i&&i!==t;){if(h(i,e)){n.push(i);break}i=i.parentElement}}),l(u(n))};return"undefined"!=typeof Element&&Element.prototype.closest?function(t,n){if(n)return e.call(this,t,n);var i=[];return r(this,function(e){var n=e.closest(t);n&&i.push(n)}),l(u(i))}:e}(),ee=Object.freeze({closest:Y}),te=function(e,t,n,i,o){var u,s,c,f=this;return"function"==typeof t&&(n=t,t=null),e.split(" ").forEach(function(a){u=a.split("."),a=u[0]||null,s=u[1]||null,c=fe(n),r(f,function(r){if(t&&(c=pe.bind(r,t,c)),o){var u=c;c=function(o){ne.call(r,e,t,n,i),u.call(r,o)}}r.addEventListener(a,c,i||!1),se(r).push({eventName:a,handler:n,eventListener:c,selector:t,namespace:s})})},this),this},ne=function(e,t,n,i){var o,u,s,c=this;return void 0===e&&(e=""),"function"==typeof t&&(n=t,t=null),e.split(" ").forEach(function(e){return o=e.split("."),e=o[0]||null,u=o[1]||null,r(c,function(o){s=se(o),r(s.filter(function(i){return!(e&&i.eventName!==e||u&&i.namespace!==u||n&&i.handler!==n||t&&i.selector!==t)}),function(e){o.removeEventListener(e.eventName,e.eventListener,i||!1),s.splice(s.indexOf(e),1)}),e||u||t||n?0===s.length&&ce(o):ce(o)})},this),this},ie="__domtastic_event__",re=1,oe={},ue=[],se=function(e){e[ie]||(e[ie]=0===ue.length?++re:ue.pop());var t=e[ie];return oe[t]||(oe[t]=[])},ce=function(e){var t=e[ie];oe[t]&&(oe[t]=null,e[ie]=null,ue.push(t))},fe=function(e){return function(t){return e.call(this,he(t))}},ae={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"},le=function(){return!0},de=function(){return!1},he=function(e){if(!e.isDefaultPrevented||e.stopImmediatePropagation||e.stopPropagation){for(var t in ae)!function(t,n,i){e[t]=function(){return this[n]=le,i&&i.apply(this,arguments)},e[n]=de}(t,ae[t],e[t]);e._preventDefault&&e.preventDefault()}return e},pe=function(e,t,n){var i=n._target||n.target,r=Y.call([i],e,this)[0];r&&r!==this&&(r!==i&&n.isPropagationStopped&&n.isPropagationStopped()||t.call(r,n))},ve=te,me=ne,ye=Object.freeze({on:te,off:ne,one:function(e,t,n,i){return te.call(this,e,t,n,i,1)},getHandlers:se,clearHandlers:ce,proxyHandler:fe,delegateHandler:pe,bind:ve,unbind:me}),be=/^(mouse(down|up|over|out|enter|leave|move)|contextmenu|(dbl)?click)$/,ge=/^key(down|press|up)$/,Ee=function(e,t,n){var i=void 0===n?{}:n,o=i.bubbles,u=void 0===o||o,s=i.cancelable,c=void 0===s||s,f=i.preventDefault,a=void 0!==f&&f,l=new(Ne(e))(e,{bubbles:u,cancelable:c,preventDefault:a,detail:t});return l._preventDefault=a,r(this,function(n){!u||je||Ce(n)?Te(n,l):Oe(n,e,{bubbles:u,cancelable:c,preventDefault:a,detail:t})})},Ne=function(e){return Ae?be.test(e)?MouseEvent:ge.test(e)?KeyboardEvent:CustomEvent:CustomEvent},Ce=function(e){return e===window||e===document||K(e.ownerDocument.documentElement,e)},Oe=function(e,t,n){void 0===n&&(n={}),n.bubbles=!1;var i=new CustomEvent(t,n);i._target=e;do{Te(e,i)}while(e=e.parentNode)},we=["blur","focus","select","submit"],Te=function(e,t){-1===we.indexOf(t.type)||"function"!=typeof e[t.type]||t._preventDefault||t.cancelable?e.dispatchEvent(t):e[t.type]()};!function(){var e=function(e,t){void 0===t&&(t={bubbles:!1,cancelable:!1,detail:void 0});var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n};e.prototype=n.CustomEvent&&n.CustomEvent.prototype,n.CustomEvent=e}();var je=function(){var e=!1,t=n.document;if(t){var i=t.createElement("div"),r=i.cloneNode();i.appendChild(r),i.addEventListener("e",function(){e=!0}),r.dispatchEvent(new CustomEvent("e",{bubbles:!0}))}return e}(),Ae=function(){try{new MouseEvent("click")}catch(e){return!1}return!0}(),Le=Object.freeze({trigger:Ee,triggerHandler:function(e,t){this[0]&&Ee.call(this[0],e,t,{bubbles:!1,preventDefault:!0})}}),De=Object.freeze({ready:function(e){return/complete|loaded|interactive/.test(document.readyState)&&document.body?e():document.addEventListener("DOMContentLoaded",e,!1),this}}),ze=n.$,_e=Object.freeze({noConflict:function(){return n.$=ze,this}}),Me=function(e,t){return l([].slice.apply(this,arguments))},xe=Object.freeze({children:function(e){var t=[];return r(this,function(n){n.children&&r(n.children,function(n){(!e||e&&h(n,e))&&t.push(n)})}),l(t)},concat:function(e){var t=this;return r(l(e),function(e){-1===[].indexOf.call(t,e)&&[].push.call(t,e)}),this},contents:function(){var e=[];return r(this,function(t){return e.push.apply(e,i(t.childNodes))}),l(e)},eq:function(e){return Me.call(this,e,e+1)},first:function(){return Me.call(this,0,1)},get:function(e){return this[e]},parent:function(e){var t=[];return r(this,function(n){(!e||e&&h(n.parentNode,e))&&t.push(n.parentNode)}),l(t)},siblings:function(e){var t=[];return r(this,function(n){return r(n.parentNode.children,function(i){i!==n&&(!e||e&&h(i,e))&&t.push(i)})}),l(t)},slice:Me}),Se=Array.isArray,Pe=Object.freeze({isFunction:function(e){return"function"==typeof e},isArray:Se}),He={},$e={};return void 0!==b&&(($e=l).matches=h,He.find=d),o($e,W,_e,Pe),o(He,M,P,F,q,U,Q,V,X,ye,Le,De,ee,xe),$e.fn=He,$e.version="0.15.12",$e.extend=o,$e.BaseClass=x($e.fn),$e});

},{}],6:[function(require,module,exports){
"use strict";const arrify=require("arrify"),isPlainObject=require("is-plain-object"),classNames=require("classnames"),render=require("./render"),utils=require("./utils"),h=(e,s,r)=>{s&&!isPlainObject(s)?(r=s,s={}):s||(s={}),r=arrify(r);const i=utils.getSelectorParts(e);return i.id&&(s.id=i.id),i.classes.length&&(s.class=classNames(s.class,i.classes)),render(i.tag,s,r)};module.exports=exports=h;

},{"./render":7,"./utils":8,"arrify":2,"classnames":3,"is-plain-object":9}],7:[function(require,module,exports){
"use strict";const voidElements=require("void-elements"),arrify=require("arrify");function renderAttributes(e){return(e=Object.keys(e).filter(r=>void 0!==e[r]&&null!==e[r]&&!1!==e[r]).map(r=>!0===e[r]?r:`${r}="${e[r]}"`).join(" "))?` ${e}`:""}function renderChildren(e){return 0===(e=arrify(e)).length?"":1===e.length?e[0]:`\n\t${e.join("\n\t")}\n`}module.exports=exports=function(e,r,t){return"!doctype"===e||voidElements[e]?`<${e}${renderAttributes(r)}>`:`<${e}${renderAttributes(r)}>${renderChildren(t)}</${e}>`};

},{"arrify":2,"void-elements":20}],8:[function(require,module,exports){
"use strict";const SELECTOR_REGEX=/(^|#|\.)[^#\.]+/g;function getTag(t){return"#"===t[0][0]||"."===t[0][0]?"div":t[0].toLowerCase()}function getClasses(t){return t.filter(isClass).map(slice(1))}function getId(t){return t.filter(isId).map(slice(1))[0]}function slice(t,e){return s=>s.slice(t,e)}function isId(t){return"#"===t[0]}function isClass(t){return"."===t[0]}exports.getSelectorParts=(t=>{const e=t.match(SELECTOR_REGEX);if(!e)throw new Error(`Invalid selector! Should have the format "name.class1.class2#id", but was: "${t}"`);return{tag:getTag(e),id:getId(e),classes:getClasses(e)}});

},{}],9:[function(require,module,exports){
"use strict";var isObject=require("isobject");function isObjectObject(t){return!0===isObject(t)&&"[object Object]"===Object.prototype.toString.call(t)}module.exports=function(t){var e,c;return!1!==isObjectObject(t)&&("function"==typeof(e=t.constructor)&&(!1!==isObjectObject(c=e.prototype)&&!1!==c.hasOwnProperty("isPrototypeOf")))};

},{"isobject":10}],10:[function(require,module,exports){
"use strict";module.exports=function(r){return null!=r&&"object"==typeof r&&!1===Array.isArray(r)};

},{}],11:[function(require,module,exports){
(function(){var t,e,i,n,s,r=function(t,e){return function(){return t.apply(e,arguments)}},o=[].slice,l={}.hasOwnProperty,u=function(t,e){for(var i in e)l.call(e,i)&&(t[i]=e[i]);function n(){this.constructor=t}return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},h=[].indexOf||function(t){for(var e=0,i=this.length;e<i;e++)if(e in this&&this[e]===t)return e;return-1};t={options:["prefix","templateDelimiters","rootInterface","preloadData","handler","executeFunctions"],extensions:["binders","formatters","components","adapters"],public:{binders:{},components:{},formatters:{},adapters:{},prefix:"rv",templateDelimiters:["{","}"],rootInterface:".",preloadData:!0,executeFunctions:!1,iterationAlias:function(t){return"%"+t+"%"},handler:function(t,e,i){return this.call(t,e,i.view.models)},configure:function(e){var i,n,s,r;for(s in null==e&&(e={}),e)if(r=e[s],"binders"===s||"components"===s||"formatters"===s||"adapters"===s)for(n in r)i=r[n],t[s][n]=i;else t.public[s]=r},bind:function(e,i,n){var s;return null==i&&(i={}),null==n&&(n={}),(s=new t.View(e,i,n)).bind(),s},init:function(e,i,n){var s,r,o;if(null==n&&(n={}),null==i&&(i=document.createElement("div")),(r=(e=t.public.components[e]).template.call(this,i))instanceof HTMLElement){for(;i.firstChild;)i.removeChild(i.firstChild);i.appendChild(r)}else i.innerHTML=r;return s=e.initialize.call(this,i,n),(o=new t.View(i,s)).bind(),o}}},window.jQuery||window.$?(s="on"in(i=window.jQuery||window.$).prototype?["on","off"]:["bind","unbind"],e=s[0],n=s[1],t.Util={bindEvent:function(t,n,s){return i(t)[e](n,s)},unbindEvent:function(t,e,s){return i(t)[n](e,s)},getInputValue:function(t){var e;return"checkbox"===(e=i(t)).attr("type")?e.is(":checked"):e.val()}}):t.Util={bindEvent:"addEventListener"in window?function(t,e,i){return t.addEventListener(e,i,!1)}:function(t,e,i){return t.attachEvent("on"+e,i)},unbindEvent:"removeEventListener"in window?function(t,e,i){return t.removeEventListener(e,i,!1)}:function(t,e,i){return t.detachEvent("on"+e,i)},getInputValue:function(t){var e,i,n,s;if("checkbox"===t.type)return t.checked;if("select-multiple"===t.type){for(s=[],i=0,n=t.length;i<n;i++)(e=t[i]).selected&&s.push(e.value);return s}return t.value}},t.TypeParser=function(){function t(){}return t.types={primitive:0,keypath:1},t.parse=function(t){return/^'.*'$|^".*"$/.test(t)?{type:this.types.primitive,value:t.slice(1,-1)}:"true"===t?{type:this.types.primitive,value:!0}:"false"===t?{type:this.types.primitive,value:!1}:"null"===t?{type:this.types.primitive,value:null}:"undefined"===t?{type:this.types.primitive,value:void 0}:""===t?{type:this.types.primitive,value:void 0}:!1===isNaN(Number(t))?{type:this.types.primitive,value:Number(t)}:{type:this.types.keypath,value:t}},t}(),t.TextTemplateParser=function(){function t(){}return t.types={text:0,binding:1},t.parse=function(t,e){var i,n,s,r,o,l,u;for(l=[],r=t.length,i=0,n=0;n<r;){if((i=t.indexOf(e[0],n))<0){l.push({type:this.types.text,value:t.slice(n)});break}if(i>0&&n<i&&l.push({type:this.types.text,value:t.slice(n,i)}),n=i+e[0].length,(i=t.indexOf(e[1],n))<0){o=t.slice(n-e[1].length),(null!=(s=l[l.length-1])?s.type:void 0)===this.types.text?s.value+=o:l.push({type:this.types.text,value:o});break}u=t.slice(n,i).trim(),l.push({type:this.types.binding,value:u}),n=i+e[1].length}return l},t}(),t.View=function(){function e(e,i,n){var s,o,l,u,h,a,p,d,c,f,b,v,m;for(this.els=e,this.models=i,null==n&&(n={}),this.update=r(this.update,this),this.publish=r(this.publish,this),this.sync=r(this.sync,this),this.unbind=r(this.unbind,this),this.bind=r(this.bind,this),this.select=r(this.select,this),this.traverse=r(this.traverse,this),this.build=r(this.build,this),this.buildBinding=r(this.buildBinding,this),this.bindingRegExp=r(this.bindingRegExp,this),this.options=r(this.options,this),this.els.jquery||this.els instanceof Array||(this.els=[this.els]),h=0,p=(c=t.extensions).length;h<p;h++){if(this[o=c[h]]={},n[o])for(s in f=n[o])l=f[s],this[o][s]=l;for(s in b=t.public[o])l=b[s],null==(u=this[o])[s]&&(u[s]=l)}for(a=0,d=(v=t.options).length;a<d;a++)this[o=v[a]]=null!=(m=n[o])?m:t.public[o];this.build()}return e.prototype.options=function(){var e,i,n,s,r;for(i={},n=0,s=(r=t.extensions.concat(t.options)).length;n<s;n++)i[e=r[n]]=this[e];return i},e.prototype.bindingRegExp=function(){return new RegExp("^"+this.prefix+"-")},e.prototype.buildBinding=function(e,i,n,s){var r,o,l,u,h,a,p;return h={},p=function(){var t,e,i,n;for(n=[],t=0,e=(i=s.match(/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g)).length;t<e;t++)a=i[t],n.push(a.trim());return n}(),u=(r=function(){var t,e,i,n;for(n=[],t=0,e=(i=p.shift().split("<")).length;t<e;t++)o=i[t],n.push(o.trim());return n}()).shift(),h.formatters=p,(l=r.shift())&&(h.dependencies=l.split(/\s+/)),this.bindings.push(new t[e](this,i,n,u,h))},e.prototype.build=function(){var e,i,n,s,r,o;for(this.bindings=[],o=this,i=function(e){var n,s,r,l,u,h,a,p,d,c,f,b,v;if(3===e.nodeType){if(u=t.TextTemplateParser,(r=o.templateDelimiters)&&(p=u.parse(e.data,r)).length&&(1!==p.length||p[0].type!==u.types.text)){for(d=0,f=p.length;d<f;d++)a=p[d],h=document.createTextNode(a.value),e.parentNode.insertBefore(h,e),1===a.type&&o.buildBinding("TextBinding",h,null,a.value);e.parentNode.removeChild(e)}}else 1===e.nodeType&&(n=o.traverse(e));if(!n)for(v=function(){var t,i,n,s;for(s=[],t=0,i=(n=e.childNodes).length;t<i;t++)l=n[t],s.push(l);return s}(),c=0,b=v.length;c<b;c++)s=v[c],i(s)},n=0,s=(r=this.els).length;n<s;n++)e=r[n],i(e);this.bindings.sort(function(t,e){var i,n;return((null!=(i=e.binder)?i.priority:void 0)||0)-((null!=(n=t.binder)?n.priority:void 0)||0)})},e.prototype.traverse=function(e){var i,n,s,r,o,l,u,h,a,p,d,c,f,b,v;for(r=this.bindingRegExp(),o="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,a=0,d=(f=e.attributes).length;a<d;a++)if(i=f[a],r.test(i.name)){if(u=i.name.replace(r,""),!(s=this.binders[u]))for(l in b=this.binders)h=b[l],"*"!==l&&-1!==l.indexOf("*")&&new RegExp("^"+l.replace(/\*/g,".+")+"$").test(u)&&(s=h);s||(s=this.binders["*"]),s.block&&(o=!0,n=[i])}for(p=0,c=(v=n||e.attributes).length;p<c;p++)i=v[p],r.test(i.name)&&(u=i.name.replace(r,""),this.buildBinding("Binding",e,u,i.value));return o||(u=e.nodeName.toLowerCase(),this.components[u]&&!e._bound&&(this.bindings.push(new t.ComponentBinding(this,e,u)),o=!0)),o},e.prototype.select=function(t){var e,i,n,s,r;for(r=[],i=0,n=(s=this.bindings).length;i<n;i++)t(e=s[i])&&r.push(e);return r},e.prototype.bind=function(){var t,e,i;for(t=0,e=(i=this.bindings).length;t<e;t++)i[t].bind()},e.prototype.unbind=function(){var t,e,i;for(t=0,e=(i=this.bindings).length;t<e;t++)i[t].unbind()},e.prototype.sync=function(){var t,e,i,n;for(e=0,i=(n=this.bindings).length;e<i;e++)"function"==typeof(t=n[e]).sync&&t.sync()},e.prototype.publish=function(){var t,e,i;for(t=0,e=(i=this.select(function(t){var e;return null!=(e=t.binder)?e.publishes:void 0})).length;t<e;t++)i[t].publish()},e.prototype.update=function(t){var e,i,n,s,r,o;for(i in null==t&&(t={}),t)n=t[i],this.models[i]=n;for(s=0,r=(o=this.bindings).length;s<r;s++)"function"==typeof(e=o[s]).update&&e.update(t)},e}(),t.Binding=function(){function e(t,e,i,n,s){this.view=t,this.el=e,this.type=i,this.keypath=n,this.options=null!=s?s:{},this.getValue=r(this.getValue,this),this.update=r(this.update,this),this.unbind=r(this.unbind,this),this.bind=r(this.bind,this),this.publish=r(this.publish,this),this.sync=r(this.sync,this),this.set=r(this.set,this),this.eventHandler=r(this.eventHandler,this),this.formattedValue=r(this.formattedValue,this),this.parseFormatterArguments=r(this.parseFormatterArguments,this),this.parseTarget=r(this.parseTarget,this),this.observe=r(this.observe,this),this.setBinder=r(this.setBinder,this),this.formatters=this.options.formatters||[],this.dependencies=[],this.formatterObservers={},this.model=void 0,this.setBinder()}return e.prototype.setBinder=function(){var t,e,i;if(!(this.binder=this.view.binders[this.type]))for(t in i=this.view.binders)e=i[t],"*"!==t&&-1!==t.indexOf("*")&&new RegExp("^"+t.replace(/\*/g,".+")+"$").test(this.type)&&(this.binder=e,this.args=new RegExp("^"+t.replace(/\*/g,"(.+)")+"$").exec(this.type),this.args.shift());if(this.binder||(this.binder=this.view.binders["*"]),this.binder instanceof Function)return this.binder={routine:this.binder}},e.prototype.observe=function(e,i,n){return t.sightglass(e,i,n,{root:this.view.rootInterface,adapters:this.view.adapters})},e.prototype.parseTarget=function(){var e;return(e=t.TypeParser.parse(this.keypath)).type===t.TypeParser.types.primitive?this.value=e.value:(this.observer=this.observe(this.view.models,this.keypath,this.sync),this.model=this.observer.target)},e.prototype.parseFormatterArguments=function(e,i){var n,s,r,o,l,u,h;for(e=function(){var i,n,r;for(r=[],i=0,n=e.length;i<n;i++)s=e[i],r.push(t.TypeParser.parse(s));return r}(),o=[],n=u=0,h=e.length;u<h;n=++u)s=e[n],o.push(s.type===t.TypeParser.types.primitive?s.value:((l=this.formatterObservers)[i]||(l[i]={}),(r=this.formatterObservers[i][n])||(r=this.observe(this.view.models,s.value,this.sync),this.formatterObservers[i][n]=r),r.value()));return o},e.prototype.formattedValue=function(t){var e,i,n,s,r,l,u,h,a;for(i=l=0,u=(h=this.formatters).length;l<u;i=++l)s=(e=(n=h[i]).match(/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g)).shift(),n=this.view.formatters[s],r=this.parseFormatterArguments(e,i),(null!=n?n.read:void 0)instanceof Function?t=(a=n.read).call.apply(a,[this.model,t].concat(o.call(r))):n instanceof Function&&(t=n.call.apply(n,[this.model,t].concat(o.call(r))));return t},e.prototype.eventHandler=function(t){var e,i;return i=(e=this).view.handler,function(n){return i.call(t,this,n,e)}},e.prototype.set=function(e){var i;return e=e instanceof Function&&!this.binder.function&&t.public.executeFunctions?this.formattedValue(e.call(this.model)):this.formattedValue(e),null!=(i=this.binder.routine)?i.call(this,this.el,e):void 0},e.prototype.sync=function(){var t,e;return this.set(function(){var i,n,s,r,o,l,u;if(this.observer){if(this.model!==this.observer.target){for(i=0,s=(o=this.dependencies).length;i<s;i++)(e=o[i]).unobserve();if(this.dependencies=[],null!=(this.model=this.observer.target)&&(null!=(l=this.options.dependencies)?l.length:void 0))for(n=0,r=(u=this.options.dependencies).length;n<r;n++)t=u[n],e=this.observe(this.model,t,this.sync),this.dependencies.push(e)}return this.observer.value()}return this.value}.call(this))},e.prototype.publish=function(){var t,e,i,n,s,r,l,u,h,a,p,d;if(this.observer){for(l=this.getValue(this.el),s=this.formatters.length-1,i=u=0,h=(a=this.formatters.slice(0).reverse()).length;u<h;i=++u)e=s-i,n=(t=a[i].split(/\s+/)).shift(),r=this.parseFormatterArguments(t,e),(null!=(p=this.view.formatters[n])?p.publish:void 0)&&(l=(d=this.view.formatters[n]).publish.apply(d,[l].concat(o.call(r))));return this.observer.setValue(l)}},e.prototype.bind=function(){var t,e,i,n,s,r,o;if(this.parseTarget(),null!=(s=this.binder.bind)&&s.call(this,this.el),null!=this.model&&(null!=(r=this.options.dependencies)?r.length:void 0))for(i=0,n=(o=this.options.dependencies).length;i<n;i++)t=o[i],e=this.observe(this.model,t,this.sync),this.dependencies.push(e);if(this.view.preloadData)return this.sync()},e.prototype.unbind=function(){var t,e,i,n,s,r,o,l,u;for(null!=(r=this.binder.unbind)&&r.call(this,this.el),null!=(o=this.observer)&&o.unobserve(),n=0,s=(l=this.dependencies).length;n<s;n++)l[n].unobserve();for(i in this.dependencies=[],u=this.formatterObservers)for(t in e=u[i])e[t].unobserve();return this.formatterObservers={}},e.prototype.update=function(t){var e,i;return null==t&&(t={}),this.model=null!=(e=this.observer)?e.target:void 0,null!=(i=this.binder.update)?i.call(this,t):void 0},e.prototype.getValue=function(e){return this.binder&&null!=this.binder.getValue?this.binder.getValue.call(this,e):t.Util.getInputValue(e)},e}(),t.ComponentBinding=function(e){function i(e,i,n){var s,o,l,u,a,p,d,c;for(this.view=e,this.el=i,this.type=n,this.unbind=r(this.unbind,this),this.bind=r(this.bind,this),this.locals=r(this.locals,this),this.component=this.view.components[this.type],this.static={},this.observers={},this.upstreamObservers={},o=e.bindingRegExp(),a=0,p=(d=this.el.attributes||[]).length;a<p;a++)s=d[a],o.test(s.name)||(l=this.camelCase(s.name),u=t.TypeParser.parse(s.value),h.call(null!=(c=this.component.static)?c:[],l)>=0?this.static[l]=s.value:u.type===t.TypeParser.types.primitive?this.static[l]=u.value:this.observers[l]=s.value)}return u(i,e),i.prototype.sync=function(){},i.prototype.update=function(){},i.prototype.publish=function(){},i.prototype.locals=function(){var t,e,i,n,s,r;for(t in i={},s=this.static)n=s[t],i[t]=n;for(t in r=this.observers)e=r[t],i[t]=e.value();return i},i.prototype.camelCase=function(t){return t.replace(/-([a-z])/g,function(t){return t[1].toUpperCase()})},i.prototype.bind=function(){var e,i,n,s,r,o,l,u,h,a,p,d,c,f,b,v,m,y,g,w;if(!this.bound){for(i in f=this.observers)n=f[i],this.observers[i]=this.observe(this.view.models,n,function(t){return function(e){return function(){return t.componentView.models[e]=t.observers[e].value()}}}(this).call(this,i));this.bound=!0}if(null!=this.componentView)this.componentView.bind();else{for(this.el.innerHTML=this.component.template.call(this),l=this.component.initialize.call(this,this.el,this.locals()),this.el._bound=!0,o={},a=0,d=(b=t.extensions).length;a<d;a++){if(o[r=b[a]]={},this.component[r])for(e in v=this.component[r])u=v[e],o[r][e]=u;for(e in m=this.view[r])u=m[e],null==(h=o[r])[e]&&(h[e]=u)}for(p=0,c=(y=t.options).length;p<c;p++)o[r=y[p]]=null!=(g=this.component[r])?g:this.view[r];for(i in this.componentView=new t.View(Array.prototype.slice.call(this.el.childNodes),l,o),this.componentView.bind(),w=this.observers)s=w[i],this.upstreamObservers[i]=this.observe(this.componentView.models,i,function(t){return function(e,i){return function(){return i.setValue(t.componentView.models[e])}}}(this).call(this,i,s))}},i.prototype.unbind=function(){var t,e,i,n;for(t in e=this.upstreamObservers)e[t].unobserve();for(t in i=this.observers)i[t].unobserve();return null!=(n=this.componentView)?n.unbind.call(this):void 0},i}(t.Binding),t.TextBinding=function(t){function e(t,e,i,n,s){this.view=t,this.el=e,this.type=i,this.keypath=n,this.options=null!=s?s:{},this.sync=r(this.sync,this),this.formatters=this.options.formatters||[],this.dependencies=[],this.formatterObservers={}}return u(e,t),e.prototype.binder={routine:function(t,e){return t.data=null!=e?e:""}},e.prototype.sync=function(){return e.__super__.sync.apply(this,arguments)},e}(t.Binding),t.public.binders.text=function(t,e){return null!=t.textContent?t.textContent=null!=e?e:"":t.innerText=null!=e?e:""},t.public.binders.html=function(t,e){return t.innerHTML=null!=e?e:""},t.public.binders.show=function(t,e){return t.style.display=e?"":"none"},t.public.binders.hide=function(t,e){return t.style.display=e?"none":""},t.public.binders.enabled=function(t,e){return t.disabled=!e},t.public.binders.disabled=function(t,e){return t.disabled=!!e},t.public.binders.checked={publishes:!0,priority:2e3,bind:function(e){return t.Util.bindEvent(e,"change",this.publish)},unbind:function(e){return t.Util.unbindEvent(e,"change",this.publish)},routine:function(t,e){var i;return"radio"===t.type?t.checked=(null!=(i=t.value)?i.toString():void 0)===(null!=e?e.toString():void 0):t.checked=!!e}},t.public.binders.unchecked={publishes:!0,priority:2e3,bind:function(e){return t.Util.bindEvent(e,"change",this.publish)},unbind:function(e){return t.Util.unbindEvent(e,"change",this.publish)},routine:function(t,e){var i;return"radio"===t.type?t.checked=(null!=(i=t.value)?i.toString():void 0)!==(null!=e?e.toString():void 0):t.checked=!e}},t.public.binders.value={publishes:!0,priority:3e3,bind:function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return this.event="SELECT"===e.tagName?"change":"input",t.Util.bindEvent(e,this.event,this.publish)},unbind:function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return t.Util.unbindEvent(e,this.event,this.publish)},routine:function(t,e){var n,s,r,o,l,u,a;if("INPUT"===t.tagName&&"radio"===t.type)return t.setAttribute("value",e);if(null!=window.jQuery){if(t=i(t),(null!=e?e.toString():void 0)!==(null!=(o=t.val())?o.toString():void 0))return t.val(null!=e?e:"")}else if("select-multiple"===t.type){if(null!=e){for(a=[],s=0,r=t.length;s<r;s++)n=t[s],a.push(n.selected=(l=n.value,h.call(e,l)>=0));return a}}else if((null!=e?e.toString():void 0)!==(null!=(u=t.value)?u.toString():void 0))return t.value=null!=e?e:""}},t.public.binders.if={block:!0,priority:4e3,bind:function(t){var e,i;if(null==this.marker)return e=[this.view.prefix,this.type].join("-").replace("--","-"),i=t.getAttribute(e),this.marker=document.createComment(" rivets: "+this.type+" "+i+" "),this.bound=!1,t.removeAttribute(e),t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t)},unbind:function(){if(this.nested)return this.nested.unbind(),this.bound=!1},routine:function(e,i){var n,s,r,o;if(!!i==!this.bound){if(i){for(n in r={},o=this.view.models)s=o[n],r[n]=s;return(this.nested||(this.nested=new t.View(e,r,this.view.options()))).bind(),this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.bound=!0}return e.parentNode.removeChild(e),this.nested.unbind(),this.bound=!1}},update:function(t){var e;return null!=(e=this.nested)?e.update(t):void 0}},t.public.binders.unless={block:!0,priority:4e3,bind:function(e){return t.public.binders.if.bind.call(this,e)},unbind:function(){return t.public.binders.if.unbind.call(this)},routine:function(e,i){return t.public.binders.if.routine.call(this,e,!i)},update:function(e){return t.public.binders.if.update.call(this,e)}},t.public.binders["on-*"]={function:!0,priority:1e3,unbind:function(e){if(this.handler)return t.Util.unbindEvent(e,this.args[0],this.handler)},routine:function(e,i){return this.handler&&t.Util.unbindEvent(e,this.args[0],this.handler),t.Util.bindEvent(e,this.args[0],this.handler=this.eventHandler(i))}},t.public.binders["each-*"]={block:!0,priority:4e3,bind:function(t){var e,i,n,s;if(null==this.marker)e=[this.view.prefix,this.type].join("-").replace("--","-"),this.marker=document.createComment(" rivets: "+this.type+" "),this.iterated=[],t.removeAttribute(e),t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t);else for(i=0,n=(s=this.iterated).length;i<n;i++)s[i].bind()},unbind:function(t){var e,i,n;if(null!=this.iterated)for(e=0,i=(n=this.iterated).length;e<i;e++)n[e].unbind()},routine:function(e,i){var n,s,r,o,l,u,h,a,p,d,c,f,b,v,m,y,g,w,k;if(u=this.args[0],i=i||[],this.iterated.length>i.length)for(c=0,v=(g=Array(this.iterated.length-i.length)).length;c<v;c++)g[c],(d=this.iterated.pop()).unbind(),this.marker.parentNode.removeChild(d.els[0]);for(r=f=0,m=i.length;f<m;r=++f)if(l=i[r],(s={index:r})[t.public.iterationAlias(u)]=r,s[u]=l,null==this.iterated[r]){for(o in w=this.view.models)l=w[o],null==s[o]&&(s[o]=l);a=this.iterated.length?this.iterated[this.iterated.length-1].els[0]:this.marker,(h=this.view.options()).preloadData=!0,p=e.cloneNode(!0),(d=new t.View(p,s,h)).bind(),this.iterated.push(d),this.marker.parentNode.insertBefore(p,a.nextSibling)}else this.iterated[r].models[u]!==l&&this.iterated[r].update(s);if("OPTION"===e.nodeName)for(b=0,y=(k=this.view.bindings).length;b<y;b++)(n=k[b]).el===this.marker.parentNode&&"value"===n.type&&n.sync()},update:function(t){var e,i,n,s,r,o;for(i in e={},t)n=t[i],i!==this.args[0]&&(e[i]=n);for(s=0,r=(o=this.iterated).length;s<r;s++)o[s].update(e)}},t.public.binders["class-*"]=function(t,e){var i;if(!e==(-1!==(i=" "+t.className+" ").indexOf(" "+this.args[0]+" ")))return t.className=e?t.className+" "+this.args[0]:i.replace(" "+this.args[0]+" "," ").trim()},t.public.binders["*"]=function(t,e){return null!=e?t.setAttribute(this.type,e):t.removeAttribute(this.type)},t.public.formatters.call=function(){var t,e;return e=arguments[0],t=2<=arguments.length?o.call(arguments,1):[],e.call.apply(e,[this].concat(o.call(t)))},t.public.adapters["."]={id:"_rv",counter:0,weakmap:{},weakReference:function(t){var e,i,n;return t.hasOwnProperty(this.id)||(e=this.counter++,Object.defineProperty(t,this.id,{value:e})),(i=this.weakmap)[n=t[this.id]]||(i[n]={callbacks:{}})},cleanupWeakReference:function(t,e){if(!(Object.keys(t.callbacks).length||t.pointers&&Object.keys(t.pointers).length))return delete this.weakmap[e]},stubFunction:function(t,e){var i,n,s;return n=t[e],i=this.weakReference(t),s=this.weakmap,t[e]=function(){var e,r,o,l,u,h,a,p,d;for(r in o=n.apply(t,arguments),h=i.pointers)for(e=h[r],l=0,u=(d=null!=(a=null!=(p=s[r])?p.callbacks[e]:void 0)?a:[]).length;l<u;l++)(0,d[l])();return o}},observeMutations:function(t,e,i){var n,s,r,o,l,u;if(Array.isArray(t)){if(null==(r=this.weakReference(t)).pointers)for(r.pointers={},l=0,u=(s=["push","pop","shift","unshift","sort","reverse","splice"]).length;l<u;l++)n=s[l],this.stubFunction(t,n);if(null==(o=r.pointers)[e]&&(o[e]=[]),h.call(r.pointers[e],i)<0)return r.pointers[e].push(i)}},unobserveMutations:function(t,e,i){var n,s,r;if(Array.isArray(t)&&null!=t[this.id]&&(s=this.weakmap[t[this.id]])&&(r=s.pointers[e]))return(n=r.indexOf(i))>=0&&r.splice(n,1),r.length||delete s.pointers[e],this.cleanupWeakReference(s,t[this.id])},observe:function(t,e,i){var n,s,r,o;return null==(n=this.weakReference(t).callbacks)[e]&&(n[e]=[],(null!=(s=Object.getOwnPropertyDescriptor(t,e))?s.get:void 0)||(null!=s?s.set:void 0)||(r=t[e],Object.defineProperty(t,e,{enumerable:!0,get:function(){return r},set:(o=this,function(i){var s,l,u,a,p;if(i!==r&&(o.unobserveMutations(r,t[o.id],e),r=i,l=o.weakmap[t[o.id]])){if((n=l.callbacks)[e])for(u=0,a=(p=n[e].slice()).length;u<a;u++)s=p[u],h.call(n[e],s)>=0&&s();return o.observeMutations(i,t[o.id],e)}})}))),h.call(n[e],i)<0&&n[e].push(i),this.observeMutations(t[e],t[this.id],e)},unobserve:function(t,e,i){var n,s,r;if((r=this.weakmap[t[this.id]])&&(n=r.callbacks[e]))return(s=n.indexOf(i))>=0&&(n.splice(s,1),n.length||(delete r.callbacks[e],this.unobserveMutations(t[e],t[this.id],e))),this.cleanupWeakReference(r,t[this.id])},get:function(t,e){return t[e]},set:function(t,e,i){return t[e]=i}},t.factory=function(e){return t.sightglass=e,t.public._=t,t.public},"object"==typeof("undefined"!=typeof module&&null!==module?module.exports:void 0)?module.exports=t.factory(require("sightglass")):"function"==typeof define&&define.amd?define(["sightglass"],function(e){return this.rivets=t.factory(e)}):this.rivets=t.factory(sightglass)}).call(this);

},{"sightglass":12}],12:[function(require,module,exports){
(function(){function t(t,s,i,h){return new e(t,s,i,h)}function e(t,e,i,h){this.options=h||{},this.options.adapters=this.options.adapters||{},this.obj=t,this.keypath=e,this.callback=i,this.objectPath=[],this.update=this.update.bind(this),this.parse(),s(this.target=this.realize())&&this.set(!0,this.key,this.target,this.callback)}function s(t){return"object"==typeof t&&null!==t}function i(t){throw new Error("[sightglass] "+t)}t.adapters={},e.tokenize=function(t,e,s){var i,h,a=[],o={i:s,path:""};for(i=0;i<t.length;i++)h=t.charAt(i),~e.indexOf(h)?(a.push(o),o={i:h,path:""}):o.path+=h;return a.push(o),a},e.prototype.parse=function(){var s,h,a=this.interfaces();a.length||i("Must define at least one adapter interface."),~a.indexOf(this.keypath[0])?(s=this.keypath[0],h=this.keypath.substr(1)):(void 0===(s=this.options.root||t.root)&&i("Must define a default root adapter."),h=this.keypath),this.tokens=e.tokenize(h,a,s),this.key=this.tokens.pop()},e.prototype.realize=function(){var t,e=this.obj,i=!1;return this.tokens.forEach(function(h,a){s(e)?(void 0!==this.objectPath[a]?e!==(t=this.objectPath[a])&&(this.set(!1,h,t,this.update),this.set(!0,h,e,this.update),this.objectPath[a]=e):(this.set(!0,h,e,this.update),this.objectPath[a]=e),e=this.get(h,e)):(!1===i&&(i=a),(t=this.objectPath[a])&&this.set(!1,h,t,this.update))},this),!1!==i&&this.objectPath.splice(i),e},e.prototype.update=function(){var t,e;(t=this.realize())!==this.target&&(s(this.target)&&this.set(!1,this.key,this.target,this.callback),s(t)&&this.set(!0,this.key,t,this.callback),e=this.value(),this.target=t,(this.value()instanceof Function||this.value()!==e)&&this.callback())},e.prototype.value=function(){if(s(this.target))return this.get(this.key,this.target)},e.prototype.setValue=function(t){s(this.target)&&this.adapter(this.key).set(this.target,this.key.path,t)},e.prototype.get=function(t,e){return this.adapter(t).get(e,t.path)},e.prototype.set=function(t,e,s,i){var h=t?"observe":"unobserve";this.adapter(e)[h](s,e.path,i)},e.prototype.interfaces=function(){var e=Object.keys(this.options.adapters);return Object.keys(t.adapters).forEach(function(t){~e.indexOf(t)||e.push(t)}),e},e.prototype.adapter=function(e){return this.options.adapters[e.i]||t.adapters[e.i]},e.prototype.unobserve=function(){var t;this.tokens.forEach(function(e,s){(t=this.objectPath[s])&&this.set(!1,e,t,this.update)},this),s(this.target)&&this.set(!1,this.key,this.target,this.callback)},"undefined"!=typeof module&&module.exports?module.exports=t:"function"==typeof define&&define.amd?define([],function(){return this.sightglass=t}):this.sightglass=t}).call(this);

},{}],13:[function(require,module,exports){
function Agent(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(t=>{Agent.prototype[t]=function(...e){return this._defaults.push({fn:t,args:e}),this}}),Agent.prototype._setDefaults=function(t){this._defaults.forEach(e=>{t[e.fn].apply(t,e.args)})},module.exports=Agent;

},{}],14:[function(require,module,exports){
let root;"undefined"!=typeof window?root=window:"undefined"!=typeof self?root=self:(console.warn("Using browser-only version of superagent in non-browser environment"),root=this);const Emitter=require("component-emitter"),RequestBase=require("./request-base"),isObject=require("./is-object"),ResponseBase=require("./response-base"),Agent=require("./agent-base");function noop(){}const request=exports=module.exports=function(e,t){return"function"==typeof t?new exports.Request("GET",e).end(t):1==arguments.length?new exports.Request("GET",e):new exports.Request(e,t)};exports.Request=Request,request.getXHR=(()=>{if(!(!root.XMLHttpRequest||root.location&&"file:"==root.location.protocol&&root.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){}throw Error("Browser-only version of superagent could not find XHR")});const trim="".trim?e=>e.trim():e=>e.replace(/(^\s*|\s*$)/g,"");function serialize(e){if(!isObject(e))return e;const t=[];for(const s in e)pushEncodedKeyValuePair(t,s,e[s]);return t.join("&")}function pushEncodedKeyValuePair(e,t,s){if(null!=s)if(Array.isArray(s))s.forEach(s=>{pushEncodedKeyValuePair(e,t,s)});else if(isObject(s))for(const r in s)pushEncodedKeyValuePair(e,`${t}[${r}]`,s[r]);else e.push(encodeURIComponent(t)+"="+encodeURIComponent(s));else null===s&&e.push(encodeURIComponent(t))}function parseString(e){const t={},s=e.split("&");let r,o;for(let e=0,n=s.length;e<n;++e)-1==(o=(r=s[e]).indexOf("="))?t[decodeURIComponent(r)]="":t[decodeURIComponent(r.slice(0,o))]=decodeURIComponent(r.slice(o+1));return t}function parseHeader(e){const t=e.split(/\r?\n/),s={};let r,o,n,i;for(let e=0,u=t.length;e<u;++e)-1!==(r=(o=t[e]).indexOf(":"))&&(n=o.slice(0,r).toLowerCase(),i=trim(o.slice(r+1)),s[n]=i);return s}function isJSON(e){return/[\/+]json($|[^-\w])/.test(e)}function Response(e){this.req=e,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;let t=this.xhr.status;1223===t&&(t=204),this._setStatusProperties(t),this.header=this.headers=parseHeader(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&e._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function Request(e,t){const s=this;this._query=this._query||[],this.method=e,this.url=t,this.header={},this._header={},this.on("end",()=>{let e,t=null,r=null;try{r=new Response(s)}catch(e){return(t=new Error("Parser is unable to parse the response")).parse=!0,t.original=e,s.xhr?(t.rawResponse=void 0===s.xhr.responseType?s.xhr.responseText:s.xhr.response,t.status=s.xhr.status?s.xhr.status:null,t.statusCode=t.status):(t.rawResponse=null,t.status=null),s.callback(t)}s.emit("response",r);try{s._isResponseOK(r)||(e=new Error(r.statusText||"Unsuccessful HTTP response"))}catch(t){e=t}e?(e.original=t,e.response=r,e.status=r.status,s.callback(e,r)):s.callback(null,r)})}function del(e,t,s){const r=request("DELETE",e);return"function"==typeof t&&(s=t,t=null),t&&r.send(t),s&&r.end(s),r}request.serializeObject=serialize,request.parseString=parseString,request.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},request.serialize={"application/x-www-form-urlencoded":serialize,"application/json":JSON.stringify},request.parse={"application/x-www-form-urlencoded":parseString,"application/json":JSON.parse},ResponseBase(Response.prototype),Response.prototype._parseBody=function(e){let t=request.parse[this.type];return this.req._parser?this.req._parser(this,e):(!t&&isJSON(this.type)&&(t=request.parse["application/json"]),t&&e&&(e.length||e instanceof Object)?t(e):null)},Response.prototype.toError=function(){const e=this.req,t=e.method,s=e.url,r=`cannot ${t} ${s} (${this.status})`,o=new Error(r);return o.status=this.status,o.method=t,o.url=s,o},request.Response=Response,Emitter(Request.prototype),RequestBase(Request.prototype),Request.prototype.type=function(e){return this.set("Content-Type",request.types[e]||e),this},Request.prototype.accept=function(e){return this.set("Accept",request.types[e]||e),this},Request.prototype.auth=function(e,t,s){1===arguments.length&&(t=""),"object"==typeof t&&null!==t&&(s=t,t=""),s||(s={type:"function"==typeof btoa?"basic":"auto"});return this._auth(e,t,s,e=>{if("function"==typeof btoa)return btoa(e);throw new Error("Cannot use basic auth, btoa is not a function")})},Request.prototype.query=function(e){return"string"!=typeof e&&(e=serialize(e)),e&&this._query.push(e),this},Request.prototype.attach=function(e,t,s){if(t){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(e,t,s||t.name)}return this},Request.prototype._getFormData=function(){return this._formData||(this._formData=new root.FormData),this._formData},Request.prototype.callback=function(e,t){if(this._shouldRetry(e,t))return this._retry();const s=this._callback;this.clearTimeout(),e&&(this._maxRetries&&(e.retries=this._retries-1),this.emit("error",e)),s(e,t)},Request.prototype.crossDomainError=function(){const e=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");e.crossDomain=!0,e.status=this.status,e.method=this.method,e.url=this.url,this.callback(e)},Request.prototype.buffer=Request.prototype.ca=Request.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},Request.prototype.pipe=Request.prototype.write=(()=>{throw Error("Streaming is not supported in browser version of superagent")}),Request.prototype._isHost=function(e){return e&&"object"==typeof e&&!Array.isArray(e)&&"[object Object]"!==Object.prototype.toString.call(e)},Request.prototype.end=function(e){this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=e||noop,this._finalizeQueryString(),this._end()},Request.prototype._end=function(){if(this._aborted)return this.callback(Error("The request has been aborted even before .end() was called"));const e=this,t=this.xhr=request.getXHR();let s=this._formData||this._data;this._setTimeouts(),t.onreadystatechange=(()=>{const s=t.readyState;if(s>=2&&e._responseTimeoutTimer&&clearTimeout(e._responseTimeoutTimer),4!=s)return;let r;try{r=t.status}catch(e){r=0}if(!r){if(e.timedout||e._aborted)return;return e.crossDomainError()}e.emit("end")});const r=(t,s)=>{s.total>0&&(s.percent=s.loaded/s.total*100),s.direction=t,e.emit("progress",s)};if(this.hasListeners("progress"))try{t.onprogress=r.bind(null,"download"),t.upload&&(t.upload.onprogress=r.bind(null,"upload"))}catch(e){}try{this.username&&this.password?t.open(this.method,this.url,!0,this.username,this.password):t.open(this.method,this.url,!0)}catch(e){return this.callback(e)}if(this._withCredentials&&(t.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof s&&!this._isHost(s)){const e=this._header["content-type"];let t=this._serializer||request.serialize[e?e.split(";")[0]:""];!t&&isJSON(e)&&(t=request.serialize["application/json"]),t&&(s=t(s))}for(const e in this.header)null!=this.header[e]&&this.header.hasOwnProperty(e)&&t.setRequestHeader(e,this.header[e]);this._responseType&&(t.responseType=this._responseType),this.emit("request",this),t.send(void 0!==s?s:null)},request.agent=(()=>new Agent),["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach(e=>{Agent.prototype[e.toLowerCase()]=function(t,s){const r=new request.Request(e,t);return this._setDefaults(r),s&&r.end(s),r}}),Agent.prototype.del=Agent.prototype.delete,request.get=((e,t,s)=>{const r=request("GET",e);return"function"==typeof t&&(s=t,t=null),t&&r.query(t),s&&r.end(s),r}),request.head=((e,t,s)=>{const r=request("HEAD",e);return"function"==typeof t&&(s=t,t=null),t&&r.query(t),s&&r.end(s),r}),request.options=((e,t,s)=>{const r=request("OPTIONS",e);return"function"==typeof t&&(s=t,t=null),t&&r.send(t),s&&r.end(s),r}),request.del=del,request.delete=del,request.patch=((e,t,s)=>{const r=request("PATCH",e);return"function"==typeof t&&(s=t,t=null),t&&r.send(t),s&&r.end(s),r}),request.post=((e,t,s)=>{const r=request("POST",e);return"function"==typeof t&&(s=t,t=null),t&&r.send(t),s&&r.end(s),r}),request.put=((e,t,s)=>{const r=request("PUT",e);return"function"==typeof t&&(s=t,t=null),t&&r.send(t),s&&r.end(s),r});

},{"./agent-base":13,"./is-object":15,"./request-base":16,"./response-base":17,"component-emitter":4}],15:[function(require,module,exports){
"use strict";function isObject(t){return null!==t&&"object"==typeof t}module.exports=isObject;

},{}],16:[function(require,module,exports){
"use strict";const isObject=require("./is-object");function RequestBase(t){if(t)return mixin(t)}function mixin(t){for(const e in RequestBase.prototype)t[e]=RequestBase.prototype[e];return t}module.exports=RequestBase,RequestBase.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},RequestBase.prototype.parse=function(t){return this._parser=t,this},RequestBase.prototype.responseType=function(t){return this._responseType=t,this},RequestBase.prototype.serialize=function(t){return this._serializer=t,this},RequestBase.prototype.timeout=function(t){if(!t||"object"!=typeof t)return this._timeout=t,this._responseTimeout=0,this;for(const e in t)switch(e){case"deadline":this._timeout=t.deadline;break;case"response":this._responseTimeout=t.response;break;default:console.warn("Unknown timeout option",e)}return this},RequestBase.prototype.retry=function(t,e){return 0!==arguments.length&&!0!==t||(t=1),t<=0&&(t=0),this._maxRetries=t,this._retries=0,this._retryCallback=e,this};const ERROR_CODES=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];RequestBase.prototype._shouldRetry=function(t,e){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{const s=this._retryCallback(t,e);if(!0===s)return!0;if(!1===s)return!1}catch(t){console.error(t)}if(e&&e.status&&e.status>=500&&501!=e.status)return!0;if(t){if(t.code&&~ERROR_CODES.indexOf(t.code))return!0;if(t.timeout&&"ECONNABORTED"==t.code)return!0;if(t.crossDomain)return!0}return!1},RequestBase.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},RequestBase.prototype.then=function(t,e){if(!this._fullfilledPromise){const t=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((e,s)=>{t.on("error",s),t.on("abort",()=>{const t=new Error("Aborted");t.code="ABORTED",t.status=this.status,t.method=this.method,t.url=this.url,s(t)}),t.end((t,i)=>{t?s(t):e(i)})})}return this._fullfilledPromise.then(t,e)},RequestBase.prototype.catch=function(t){return this.then(void 0,t)},RequestBase.prototype.use=function(t){return t(this),this},RequestBase.prototype.ok=function(t){if("function"!=typeof t)throw Error("Callback required");return this._okCallback=t,this},RequestBase.prototype._isResponseOK=function(t){return!!t&&(this._okCallback?this._okCallback(t):t.status>=200&&t.status<300)},RequestBase.prototype.get=function(t){return this._header[t.toLowerCase()]},RequestBase.prototype.getHeader=RequestBase.prototype.get,RequestBase.prototype.set=function(t,e){if(isObject(t)){for(const e in t)this.set(e,t[e]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},RequestBase.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},RequestBase.prototype.field=function(t,e){if(null==t)throw new Error(".field(name, val) name can not be empty");if(this._data)throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");if(isObject(t)){for(const e in t)this.field(e,t[e]);return this}if(Array.isArray(e)){for(const s in e)this.field(t,e[s]);return this}if(null==e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(t,e),this},RequestBase.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},RequestBase.prototype._auth=function(t,e,s,i){switch(s.type){case"basic":this.set("Authorization",`Basic ${i(`${t}:${e}`)}`);break;case"auto":this.username=t,this.password=e;break;case"bearer":this.set("Authorization",`Bearer ${t}`)}return this},RequestBase.prototype.withCredentials=function(t){return null==t&&(t=!0),this._withCredentials=t,this},RequestBase.prototype.redirects=function(t){return this._maxRedirects=t,this},RequestBase.prototype.maxResponseSize=function(t){if("number"!=typeof t)throw TypeError("Invalid argument");return this._maxResponseSize=t,this},RequestBase.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},RequestBase.prototype.send=function(t){const e=isObject(t);let s=this._header["content-type"];if(this._formData)throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");if(e&&!this._data)Array.isArray(t)?this._data=[]:this._isHost(t)||(this._data={});else if(t&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&isObject(this._data))for(const e in t)this._data[e]=t[e];else"string"==typeof t?(s||this.type("form"),s=this._header["content-type"],this._data="application/x-www-form-urlencoded"==s?this._data?`${this._data}&${t}`:t:(this._data||"")+t):this._data=t;return!e||this._isHost(t)?this:(s||this.type("json"),this)},RequestBase.prototype.sortQuery=function(t){return this._sort=void 0===t||t,this},RequestBase.prototype._finalizeQueryString=function(){const t=this._query.join("&");if(t&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+t),this._query.length=0,this._sort){const t=this.url.indexOf("?");if(t>=0){const e=this.url.substring(t+1).split("&");"function"==typeof this._sort?e.sort(this._sort):e.sort(),this.url=this.url.substring(0,t)+"?"+e.join("&")}}},RequestBase.prototype._appendQueryString=(()=>{console.trace("Unsupported")}),RequestBase.prototype._timeoutError=function(t,e,s){if(this._aborted)return;const i=new Error(`${t+e}ms exceeded`);i.timeout=e,i.code="ECONNABORTED",i.errno=s,this.timedout=!0,this.abort(),this.callback(i)},RequestBase.prototype._setTimeouts=function(){const t=this;this._timeout&&!this._timer&&(this._timer=setTimeout(()=>{t._timeoutError("Timeout of ",t._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(()=>{t._timeoutError("Response timeout of ",t._responseTimeout,"ETIMEDOUT")},this._responseTimeout))};

},{"./is-object":15}],17:[function(require,module,exports){
"use strict";const utils=require("./utils");function ResponseBase(t){if(t)return mixin(t)}function mixin(t){for(const s in ResponseBase.prototype)t[s]=ResponseBase.prototype[s];return t}module.exports=ResponseBase,ResponseBase.prototype.get=function(t){return this.header[t.toLowerCase()]},ResponseBase.prototype._setHeaderProperties=function(t){const s=t["content-type"]||"";this.type=utils.type(s);const e=utils.params(s);for(const t in e)this[t]=e[t];this.links={};try{t.link&&(this.links=utils.parseLinks(t.link))}catch(t){}},ResponseBase.prototype._setStatusProperties=function(t){const s=t/100|0;this.status=this.statusCode=t,this.statusType=s,this.info=1==s,this.ok=2==s,this.redirect=3==s,this.clientError=4==s,this.serverError=5==s,this.error=(4==s||5==s)&&this.toError(),this.created=201==t,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.forbidden=403==t,this.notFound=404==t,this.unprocessableEntity=422==t};

},{"./utils":18}],18:[function(require,module,exports){
"use strict";exports.type=(e=>e.split(/ *; */).shift()),exports.params=(e=>e.split(/ *; */).reduce((e,t)=>{const s=t.split(/ *= */),i=s.shift(),r=s.shift();return i&&r&&(e[i]=r),e},{})),exports.parseLinks=(e=>e.split(/ *, */).reduce((e,t)=>{const s=t.split(/ *; */),i=s[0].slice(1,-1);return e[s[1].split(/ *= */)[1].slice(1,-1)]=i,e},{})),exports.cleanHeader=((e,t)=>(delete e["content-type"],delete e["content-length"],delete e["transfer-encoding"],delete e.host,t&&(delete e.authorization,delete e.cookie),e));

},{}],19:[function(require,module,exports){
var toString=Object.prototype.toString;module.exports=function(e){switch(toString.call(e)){case"[object Function]":return"function";case"[object Date]":return"date";case"[object RegExp]":return"regexp";case"[object Arguments]":return"arguments";case"[object Array]":return"array";case"[object String]":return"string"}if("object"==typeof e&&e&&"number"==typeof e.length)try{if("function"==typeof e.callee)return"arguments"}catch(e){if(e instanceof TypeError)return"arguments"}return null===e?"null":void 0===e?"undefined":e&&1===e.nodeType?"element":e===Object(e)?"object":typeof e};

},{}],20:[function(require,module,exports){
module.exports={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
